name: Build and Publish Docker Images for Production

on:
  release:
    types: [published]

jobs:
  build-and-push:
    name: Build and Push Docker Image for Production
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.2.2

      - name: Capture release version
        run: echo "RELEASE_VERSION=${{ github.event.release.tag_name }}" >> $GITHUB_ENV

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          export_default_credentials: true

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.10.0

      - name: Build and Push Docker Image
        env:
          AR_REGISTRY: ${{ secrets.GCP_REGION }}-docker.pkg.dev
          GCP_PROJECT: ${{ secrets.GCP_PROJECT_ID }}
          REPOSITORY: kodus-images
          IMAGE: kodus-service-ast-prod
          IMAGE_TAG_SHA: ${{ github.sha }}
          IMAGE_TAG_VERSION: ${{ github.event.release.tag_name }}
        run: |
          docker build \
            --build-arg RELEASE_VERSION=$IMAGE_TAG_VERSION \
            --build-arg API_CLOUD_MODE=true \
            -f DockerFiles/Dockerfile.prod \
            -t $AR_REGISTRY/$GCP_PROJECT/$REPOSITORY/$IMAGE:$IMAGE_TAG_SHA \
            -t $AR_REGISTRY/$GCP_PROJECT/$REPOSITORY/$IMAGE:$IMAGE_TAG_VERSION .

          docker push $AR_REGISTRY/$GCP_PROJECT/$REPOSITORY/$IMAGE:$IMAGE_TAG_SHA
          docker push $AR_REGISTRY/$GCP_PROJECT/$REPOSITORY/$IMAGE:$IMAGE_TAG_VERSION

      - name: Cleanup Docker images
        run: |
          docker rmi $AR_REGISTRY/$GCP_PROJECT/$REPOSITORY/$IMAGE:$IMAGE_TAG_SHA || true
          docker rmi $AR_REGISTRY/$GCP_PROJECT/$REPOSITORY/$IMAGE:$IMAGE_TAG_VERSION || true
        env:
          AR_REGISTRY: ${{ secrets.GCP_REGION }}-docker.pkg.dev
          GCP_PROJECT: ${{ secrets.GCP_PROJECT_ID }}
          REPOSITORY: kodus-images
          IMAGE: kodus-service-ast-prod
          IMAGE_TAG_SHA: ${{ github.sha }}
          IMAGE_TAG_VERSION: ${{ github.event.release.tag_name }}

      - name: Notificar Discord sobre Sucesso
        if: success()
        uses: sarisia/actions-status-discord@v1.15.3
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          content: ":tada: A imagem Docker `${{ env.RELEASE_VERSION }}` foi publicada no Artifact Registry com sucesso."
          title: "Build e Push: kodus-service-ast"
          username: "GitHub Actions"
          color: 0x00FF00

      - name: Notificar Discord sobre Falha
        if: failure()
        uses: sarisia/actions-status-discord@v1.15.3
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          content: ":x: Falha ao publicar a imagem Docker `${{ env.RELEASE_VERSION }}` no Artifact Registry."
          title: "Build e Push: kodus-service-ast"
          username: "GitHub Actions"
          color: 0xFF0000
