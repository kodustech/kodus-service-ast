name: Build and Publish Docker Images for Production

on:
    release:
        types: [published]

jobs:
    build-and-push:
        name: Build and Push Docker Image for Production
        runs-on: ubuntu-latest

        # Permiss√µes necess√°rias para o auth@v2
        permissions:
            contents: read
            id-token: write

        env:
            # Essas vari√°veis ficam dispon√≠veis em todos os passos abaixo
            AR_REGISTRY: ${{ secrets.GCP_REGION }}-docker.pkg.dev
            GCP_PROJECT: ${{ secrets.GCP_PROJECT_ID }}
            REPOSITORY: kodus-images
            IMAGE: kodus-service-ast-prod
            IMAGE_TAG_SHA: ${{ github.sha }}
            IMAGE_TAG_VERSION: ${{ github.event.release.tag_name }}

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Capture release version
              run: echo "RELEASE_VERSION=${{ github.event.release.tag_name }}" >> $GITHUB_ENV

            # 1) Autentica√ß√£o via Service Account Key JSON
            - name: Autenticar no GCP
              uses: google-github-actions/auth@v2
              with:
                  credentials_json: ${{ secrets.GCP_SA_KEY }}

            # 2) Instala e configura o gcloud CLI (j√° pega as credenciais definidas acima)
            - name: Set up Google Cloud SDK
              uses: google-github-actions/setup-gcloud@v2
              with:
                  project_id: ${{ env.GCP_PROJECT }}

            # 3) Configura o Docker para usar o ARTIFACT REGISTRY
            - name: Configure Docker for Artifact Registry
              run: gcloud auth configure-docker ${{ env.AR_REGISTRY }}

            # 4) Opcional: DEBUG (apague depois de validar)
            - name: üïµÔ∏è‚Äç‚ôÇÔ∏è DANGER - DEBUG ALL VALUES
              run: |
                  echo "GCP_PROJECT: ${{ env.GCP_PROJECT }}"
                  echo "REGISTRY:   ${{ env.AR_REGISTRY }}/$GCP_PROJECT/$REPOSITORY/$IMAGE:$IMAGE_TAG_VERSION"
                  echo "KEY JSON (in√≠cio):"
                  echo "${{ secrets.GCP_SA_KEY }}" | head -n 5
                  echo "..."

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            # 5) Build & Push
            - name: Build and Push Docker Image
              run: |
                  docker build \
                    --build-arg RELEASE_VERSION=$IMAGE_TAG_VERSION \
                    --build-arg API_CLOUD_MODE=true \
                    -f DockerFiles/Dockerfile.prod \
                    -t $AR_REGISTRY/$GCP_PROJECT/$REPOSITORY/$IMAGE:$IMAGE_TAG_SHA \
                    -t $AR_REGISTRY/$GCP_PROJECT/$REPOSITORY/$IMAGE:$IMAGE_TAG_VERSION .

                  docker push $AR_REGISTRY/$GCP_PROJECT/$REPOSITORY/$IMAGE:$IMAGE_TAG_SHA
                  docker push $AR_REGISTRY/$GCP_PROJECT/$REPOSITORY/$IMAGE:$IMAGE_TAG_VERSION

            # 6) Cleanup
            - name: Cleanup Docker images
              run: |
                  docker rmi $AR_REGISTRY/$GCP_PROJECT/$REPOSITORY/$IMAGE:$IMAGE_TAG_SHA || true
                  docker rmi $AR_REGISTRY/$GCP_PROJECT/$REPOSITORY/$IMAGE:$IMAGE_TAG_VERSION || true

            # 7) Atualiza reposit√≥rio de infra e commita nova vers√£o
            - name: Update Infrastructure Repository
              env:
                  INFRA_REPO_PAT: ${{ secrets.INFRA_REPO_PAT }}
                  FULL_IMAGE_PATH: "$AR_REGISTRY/$GCP_PROJECT/$REPOSITORY/$IMAGE:$IMAGE_TAG_VERSION"
              run: |
                  git config --global user.name "GitHub Actions"
                  git config --global user.email "actions@github.com"

                  git clone https://x-access-token:$INFRA_REPO_PAT@github.com/kodus-git/kodus-infra.git infra
                  cd infra
                  sed -i.bak "s|container_image *=.*|container_image = \"$FULL_IMAGE_PATH\"|" envs/prod/platform-base.tfvars
                  git add envs/prod/platform-base.tfvars
                  git commit -m "Deploy: atualiza imagem kodus-service-ast para $IMAGE_TAG_VERSION"
                  git push

            # 8) Notifica√ß√µes no Discord
            - name: Notificar Discord sobre Sucesso
              if: success()
              uses: sarisia/actions-status-discord@v1
              with:
                  webhook: ${{ secrets.DISCORD_WEBHOOK }}
                  content: ":tada: Imagem `${{ env.IMAGE_TAG_VERSION }}` publicada com sucesso."
                  title: "Build e Push: kodus-service-ast"
                  username: "GitHub Actions"
                  color: 0x00FF00

            - name: Notificar Discord sobre Falha
              if: failure()
              uses: sarisia/actions-status-discord@v1
              with:
                  webhook: ${{ secrets.DISCORD_WEBHOOK }}
                  content: ":x: Falha ao publicar `${{ env.IMAGE_TAG_VERSION }}`."
                  title: "Build e Push: kodus-service-ast"
                  username: "GitHub Actions"
                  color: 0xFF0000
