name: CI/CD Workflow QA

on:
  push:
    branches:
      - main

jobs:
  build_and_push_image:
    name: Build and push image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - id: auth
        name: Autenticar com o Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
          project_id: ${{ secrets.GCP_PROJECT_QA_ID }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2.1.4

      - name: Diagnóstico e Preparação
        run: |
          # Verificar identidade atual
          echo "Conta atual:"
          gcloud auth list

          # Verificar permissões IAM para diagnóstico
          echo "Verificando permissões IAM..."
          gcloud projects get-iam-policy ${{ secrets.GCP_PROJECT_QA_ID }} --flatten="bindings[].members" --format="table(bindings.role,bindings.members)" | grep -i $(gcloud auth list --filter="status:ACTIVE" --format="value(account)") || echo "Conta não encontrada na política IAM"

          # Verificar se o repositório existe
          echo "Repositórios disponíveis:"
          gcloud artifacts repositories list --project=${{ secrets.GCP_PROJECT_QA_ID }} --location=${{ secrets.GCP_REGION }}

      - name: Preparar Docker para o Artifact Registry
        run: |
          # Usar a abordagem recomendada para autenticação do Docker com o Artifact Registry
          echo "Configurando Docker para Artifact Registry..."
          gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin ${{ secrets.GCP_REGION }}-docker.pkg.dev

      - name: Build, tag, and push image to Artifact Registry
        env:
          AR_REGISTRY: ${{ secrets.GCP_REGION }}-docker.pkg.dev
          GCP_PROJECT: ${{ secrets.GCP_PROJECT_QA_ID }}
          REPOSITORY: kodus-images
          IMAGE: kodus-service-ast-qa
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --build-arg RELEASE_VERSION=${{ env.RELEASE_VERSION }} --build-arg API_CLOUD_MODE=true -f DockerFiles/Dockerfile.qa -t $AR_REGISTRY/$GCP_PROJECT/$REPOSITORY/$IMAGE:$IMAGE_TAG .
          docker push $AR_REGISTRY/$GCP_PROJECT/$REPOSITORY/$IMAGE:$IMAGE_TAG

      - name: Cleanup Docker image
        run: docker rmi $AR_REGISTRY/$GCP_PROJECT/$REPOSITORY/$IMAGE:$IMAGE_TAG || true
        env:
          AR_REGISTRY: ${{ secrets.GCP_REGION }}-docker.pkg.dev
          GCP_PROJECT: ${{ secrets.GCP_PROJECT_QA_ID }}
          REPOSITORY: kodus-images
          IMAGE: kodus-service-ast-qa
          IMAGE_TAG: ${{ github.sha }}

  deploy_in_server:
    name: Deploy in server
    runs-on: ubuntu-latest
    needs: build_and_push_image

    steps:
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2.1.4
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_QA_ID }}
          export_default_credentials: true

      - name: Get runner IP
        run: |
          ip=$(curl -s https://ipinfo.io/ip)
          echo "::add-mask::$ip"
          echo "runner_ip=$ip" >> $GITHUB_ENV

      - name: Add firewall rule for GitHub runner
        run: |
          gcloud compute firewall-rules create github-actions-runner-temp --action=allow --direction=ingress --rules=tcp:22 --source-ranges=${{ env.runner_ip }}/32 --target-tags=${{ secrets.GCP_VM_NETWORK_TAG }} --priority=1000
        env:
          CLOUDSDK_CORE_PROJECT: ${{ secrets.GCP_PROJECT_QA_ID }}

      - name: Configure gcloud CLI for SSH
        run: |
          # Configurar gcloud para usar OS Login
          gcloud config set compute/zone ${{ secrets.GCP_ZONE }}

      - name: Execute start-app.sh on GCP VM
        run: |
          # Usando gcloud compute ssh com OS Login
          gcloud compute ssh ${{ secrets.GCP_QA_INSTANCE_NAME }} --project=${{ secrets.GCP_PROJECT_QA_ID }} --zone=${{ secrets.GCP_ZONE }} --command="cd ~/kodus-service-ast && ./start-app.sh qa ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_QA_ID }}/kodus-images/kodus-service-ast-qa:${{ github.sha }} ${{ github.ref }} > /dev/null 2>&1"

      - name: Remove firewall rule
        run: |
          gcloud compute firewall-rules delete github-actions-runner-temp --quiet
        env:
          CLOUDSDK_CORE_PROJECT: ${{ secrets.GCP_PROJECT_QA_ID }}
        if: always()

      - name: Notify Discord on Success
        if: success()
        uses: sarisia/actions-status-discord@v1.15.3
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          content: ":tada: Build and deployment successful!"
          title: "Deploy QA: kodus-service-ast"
          username: "GitHub Actions"
          color: 0x00FF00

      - name: Notify Discord on Failure
        if: failure()
        uses: sarisia/actions-status-discord@v1.15.3
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          content: ":x: Build or deployment failed. Please check the logs."
          title: "Deploy QA: kodus-service-ast"
          username: "GitHub Actions"
          color: 0xFF0000

