# name: CI/CD Workflow QA

# # Dispara em pushes na branch main
# on:
#   push:
#     branches:
#       - main

# permissions:
#   contents: read        # ler o reposit√≥rio
#   id-token: write       # emitir o OIDC token

# jobs:
#   build_and_push_image:
#     name: Build and push image
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Authenticate to GCP via OIDC
#         uses: google-github-actions/auth@v2.1.10
#         with:
#           workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
#           service_account: ${{ secrets.WIF_SA_EMAIL }}

#       - name: Set up Cloud SDK
#         uses: google-github-actions/setup-gcloud@v2.1.4

#       - name: Verify authentication
#         run: |
#           echo "Authenticated as:"
#           gcloud auth list
#           gcloud config list project

#       - name: Configure Docker for Artifact Registry
#         run: |
#           gcloud auth print-access-token \
#             | docker login -u oauth2accesstoken --password-stdin ${{ secrets.GCP_REGION }}-docker.pkg.dev

#       - name: Build, tag, and push image
#         env:
#           AR_REGISTRY: ${{ secrets.GCP_REGION }}-docker.pkg.dev
#           GCP_PROJECT: ${{ secrets.GCP_PROJECT_QA_ID }}
#           REPOSITORY: kodus-images
#           IMAGE: kodus-service-ast-qa
#           IMAGE_TAG: ${{ github.sha }}
#         run: |
#           docker build \
#             --build-arg RELEASE_VERSION=${{ env.RELEASE_VERSION }} \
#             --build-arg API_CLOUD_MODE=true \
#             -f DockerFiles/Dockerfile.qa \
#             -t $AR_REGISTRY/$GCP_PROJECT/$REPOSITORY/$IMAGE:$IMAGE_TAG .
#           docker push $AR_REGISTRY/$GCP_PROJECT/$REPOSITORY/$IMAGE:$IMAGE_TAG

#       - name: Cleanup Docker image
#         run: |
#           docker rmi $AR_REGISTRY/$GCP_PROJECT/$REPOSITORY/$IMAGE:$IMAGE_TAG || true

#   deploy_in_server:
#     name: Deploy on VM via IAP SSH
#     runs-on: ubuntu-latest
#     needs: build_and_push_image

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Authenticate to GCP via OIDC
#         uses: google-github-actions/auth@v2.1.10
#         with:
#           workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
#           service_account: ${{ secrets.WIF_SA_EMAIL }}

#       - name: Set up Cloud SDK
#         uses: google-github-actions/setup-gcloud@v2.1.4

#       - name: Verify authentication
#         run: |
#           echo "Authenticated as:"
#           gcloud auth list
#           gcloud config list project

#       - name: Deploy via IAP SSH
#         env:
#           GCP_PROJECT: ${{ secrets.GCP_PROJECT_QA_ID }}
#           GCP_ZONE: ${{ secrets.GCP_ZONE }}
#           GCP_INSTANCE: ${{ secrets.GCP_QA_INSTANCE_NAME }}
#           REGISTRY_URL: ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_QA_ID }}
#           PROJECT_ID: ${{ secrets.GCP_PROJECT_QA_ID }}
#           ARTIFACT_REPO: kodus-images
#           IMAGE_NAME: kodus-service-ast-qa
#         run: |
#           echo "Starting deploy on VM via IAP..."
#           gcloud compute ssh $GCP_INSTANCE \
#             --project=$GCP_PROJECT \
#             --zone=$GCP_ZONE \
#             --tunnel-through-iap \
#             --command="\
#               cd ~/kodus-service-ast && \
#               REGISTRY_URL='$REGISTRY_URL' \
#               PROJECT_ID='$PROJECT_ID' \
#               ARTIFACT_REPO='$ARTIFACT_REPO' \
#               IMAGE_NAME='$IMAGE_NAME' \
#               ./start-app.sh qa $GITHUB_SHA" \
#             -- -o ServerAliveInterval=30 -o ServerAliveCountMax=5

#       - name: Notify Discord on Success
#         if: success()
#         uses: sarisia/actions-status-discord@v1.15.3
#         with:
#           webhook: ${{ secrets.DISCORD_WEBHOOK }}
#           content: ":tada: Build and deployment successful!"
#           title: "Deploy QA: kodus-service-ast"
#           username: "GitHub Actions"
#           color: 0x00FF00

#       - name: Notify Discord on Failure
#         if: failure()
#         uses: sarisia/actions-status-discord@v1.15.3
#         with:
#           webhook: ${{ secrets.DISCORD_WEBHOOK }}
#           content: ":x: Build or deployment failed. Check logs."
#           title: "Deploy QA: kodus-service-ast"
#           username: "GitHub Actions"
#           color: 0xFF0000
