/**
 * Exemplo de uso do AsyncGenerator para streaming de processamento de arquivos
 * Demonstra como usar o novo sistema de streaming implementado
 */

import { CodeKnowledgeGraphService } from '../src/core/infrastructure/adapters/services/parsing/code-knowledge-graph.service.js';

/**
 * Exemplo 1: Processamento b√°sico com streaming
 */
async function basicStreamingExample() {
    const service = new CodeKnowledgeGraphService(null as any);

    try {
        // Usar o novo m√©todo de streaming
        const result = await service.buildGraphStreaming('/path/to/repo', []);

        console.log(`‚úÖ Processamento conclu√≠do!`);
        console.log(`üìÅ Arquivos processados: ${result.files.size}`);
        console.log(`üîß Fun√ß√µes encontradas: ${result.functions.size}`);
        console.log(`üè∑Ô∏è  Tipos encontrados: ${result.types.size}`);
    } catch (error) {
        console.error('‚ùå Erro no processamento:', error);
    }
}

/**
 * Exemplo 2: Streaming com controle granular usando AsyncGenerator
 */
async function advancedStreamingExample() {
    const service = new CodeKnowledgeGraphService(null as any);

    try {
        // Obter lista de arquivos
        const sourceFiles = await service.getAllSourceFiles('/path/to/repo');
        const filesToProcess = sourceFiles.slice(0, 100); // Processar apenas 100 arquivos

        console.log(
            `üöÄ Iniciando processamento streaming de ${filesToProcess.length} arquivos...`,
        );

        // Processar com controle granular
        for await (const batchProgress of service.processFilesInBatches(
            filesToProcess,
            '/path/to/repo',
        )) {
            const { batch, progress, processedFiles, totalFiles, batchIndex } =
                batchProgress;

            // Mostrar progresso em tempo real
            console.log(
                `üìä Progresso: ${progress.toFixed(2)}% (${processedFiles}/${totalFiles})`,
            );
            console.log(
                `üì¶ Lote ${batchIndex}: ${batch.files.length} arquivos processados`,
            );

            // Processar resultados do lote atual
            for (const file of batch.files) {
                console.log(
                    `  üìÑ ${file.filePath}: ${file.analysis.fileAnalysis.defines.length} defini√ß√µes`,
                );
            }

            // Verificar erros
            if (batch.errors.length > 0) {
                console.warn(`‚ö†Ô∏è  Erros no lote ${batchIndex}:`, batch.errors);
            }

            // Obter m√©tricas em tempo real
            const metrics = service.getStreamingMetrics();
            console.log(
                `‚ö° Performance: ${metrics.filesPerSecond.toFixed(2)} arquivos/seg`,
            );
            console.log(
                `üß† Mem√≥ria: ${(metrics.memoryUsage * 100).toFixed(1)}%`,
            );

            // Pausar se necess√°rio (exemplo: para evitar sobrecarga)
            if (metrics.memoryUsage > 0.8) {
                console.log('‚è∏Ô∏è  Pausando devido ao alto uso de mem√≥ria...');
                await new Promise((resolve) => setTimeout(resolve, 1000));
            }
        }

        console.log('‚úÖ Processamento streaming conclu√≠do!');
    } catch (error) {
        console.error('‚ùå Erro no processamento streaming:', error);
    }
}

/**
 * Exemplo 3: Compara√ß√£o de performance entre m√©todos
 */
async function performanceComparisonExample() {
    const service = new CodeKnowledgeGraphService(null as any);
    const testFiles = await service.getAllSourceFiles('/path/to/repo');

    console.log('üî¨ Compara√ß√£o de Performance');
    console.log('============================');

    // M√©todo tradicional
    console.log('\nüìä M√©todo tradicional (buildGraphProgressively)...');
    const traditionalStart = performance.now();
    try {
        await service.buildGraphProgressively('/path/to/repo', []);
        const traditionalTime = performance.now() - traditionalStart;
        console.log(`‚è±Ô∏è  Tempo tradicional: ${traditionalTime.toFixed(2)}ms`);
    } catch (error) {
        console.error('‚ùå Erro no m√©todo tradicional:', error);
    }

    // M√©todo streaming
    console.log('\nüìä M√©todo streaming (buildGraphStreaming)...');
    service.resetStreamingMetrics(); // Resetar m√©tricas
    const streamingStart = performance.now();
    try {
        await service.buildGraphStreaming('/path/to/repo', []);
        const streamingTime = performance.now() - streamingStart;
        console.log(`‚è±Ô∏è  Tempo streaming: ${streamingTime.toFixed(2)}ms`);

        // Mostrar m√©tricas detalhadas
        const metrics = service.getStreamingMetrics();
        console.log(`üìà M√©tricas detalhadas:`);
        console.log(
            `  - Arquivos/segundo: ${metrics.filesPerSecond.toFixed(2)}`,
        );
        console.log(
            `  - Tempo m√©dio por arquivo: ${metrics.averageProcessingTime.toFixed(2)}ms`,
        );
        console.log(
            `  - Pico de uso de mem√≥ria: ${(metrics.memoryUsage * 100).toFixed(1)}%`,
        );
    } catch (error) {
        console.error('‚ùå Erro no m√©todo streaming:', error);
    }
}

/**
 * Exemplo 4: Uso em produ√ß√£o com monitoramento
 */
async function productionMonitoringExample() {
    const service = new CodeKnowledgeGraphService(null as any);

    // Simular processamento cont√≠nuo
    const repositories = ['/repo1', '/repo2', '/repo3'];

    for (const repoPath of repositories) {
        console.log(`\nüîÑ Processando reposit√≥rio: ${repoPath}`);

        try {
            // Processar com streaming
            for await (const batchProgress of service.processFilesInBatches(
                await service.getAllSourceFiles(repoPath),
                repoPath,
            )) {
                // Em produ√ß√£o, voc√™ poderia:
                // - Salvar progresso no banco de dados
                // - Enviar m√©tricas para sistemas de monitoramento
                // - Notificar outros servi√ßos sobre o progresso

                console.log(
                    `üìä ${repoPath}: ${batchProgress.progress.toFixed(1)}%`,
                );

                // Verificar se deve parar (exemplo: sinal de shutdown)
                if (process.env.SHUTDOWN_SIGNAL === 'true') {
                    console.log(
                        'üõë Sinal de shutdown recebido, parando processamento...',
                    );
                    break;
                }
            }

            console.log(`‚úÖ ${repoPath} processado com sucesso!`);
        } catch (error) {
            console.error(`‚ùå Erro ao processar ${repoPath}:`, error);
            // Em produ√ß√£o, registrar erro e continuar com pr√≥ximo reposit√≥rio
        }
    }

    // Mostrar m√©tricas finais
    const finalMetrics = service.getStreamingMetrics();
    console.log('\nüìä M√©tricas finais:');
    console.log(
        `  - Total de arquivos processados: ${finalMetrics.filesProcessed}`,
    );
    console.log(`  - Tempo total: ${(finalMetrics.uptime / 1000).toFixed(2)}s`);
    console.log(
        `  - Throughput m√©dio: ${finalMetrics.filesPerSecond.toFixed(2)} arquivos/seg`,
    );
}

// Exportar exemplos para uso
export {
    basicStreamingExample,
    advancedStreamingExample,
    performanceComparisonExample,
    productionMonitoringExample,
};

// Exemplo de uso se executado diretamente
if (require.main === module) {
    console.log('üöÄ Executando exemplos de streaming...\n');

    // Executar exemplo b√°sico
    basicStreamingExample()
        .then(() => console.log('\n‚úÖ Exemplo b√°sico conclu√≠do\n'))
        .catch(console.error);
}
