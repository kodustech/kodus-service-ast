#!/bin/bash

# üê≥ MONITOR DOCKER FOCADO - Apenas Docker Stats
# Perfeito para monitorar workers em produ√ß√£o

echo "üê≥ MONITOR DOCKER - Recursos dos Workers"
echo "========================================"
echo ""
echo "üí° COMO USAR:"
echo "  1. Deixe este script rodando"
echo "  2. Execute opera√ß√µes pesadas (processar reposit√≥rios)"
echo "  3. Observe os picos de CPU e RAM"
echo "  4. Use os dados para dimensionar workers"
echo ""
echo "‚èπÔ∏è  Para parar: Ctrl+C"
echo ""

# Fun√ß√£o para mostrar timestamp
show_timestamp() {
    echo "üïê $(date '+%H:%M:%S') - $(date '+%d/%m/%Y')"
}

# Fun√ß√£o para mostrar m√©tricas Docker
show_docker_stats() {
    echo "üê≥ DOCKER CONTAINERS:"
    docker stats --no-stream --format "  üìä {{.Container}}: CPU {{.CPUPerc}} | RAM {{.MemUsage}} ({{.MemPerc}})" kodus-service-ast kodus-service-ast-worker 2>/dev/null || echo "  ‚ùå Containers n√£o encontrados"
}

# Fun√ß√£o para mostrar recomenda√ß√µes baseadas nos dados Docker
show_recommendations() {
    # Obter dados do worker
    local worker_stats=$(docker stats --no-stream --format "{{.CPUPerc}},{{.MemUsage}},{{.MemPerc}}" kodus-service-ast-worker 2>/dev/null)
    
    if [ -n "$worker_stats" ]; then
        IFS=',' read -r cpu_percent mem_usage mem_percent <<< "$worker_stats"
        
        # Remover % e MiB para c√°lculos
        cpu_clean=$(echo "$cpu_percent" | sed 's/%//')
        mem_clean=$(echo "$mem_usage" | sed 's/MiB.*//')
        mem_percent_clean=$(echo "$mem_percent" | sed 's/%//')
        
        echo "üí° RECOMENDA√á√ïES BASEADAS NO DOCKER:"
        
        # Status CPU
        if (( $(echo "$cpu_clean > 80" | bc -l) )); then
            echo "  üî¥ CPU: CR√çTICO (${cpu_percent}) - Precisa de mais workers!"
        elif (( $(echo "$cpu_clean > 60" | bc -l) )); then
            echo "  üü° CPU: ALTO (${cpu_percent}) - Considere mais workers"
        else
            echo "  üü¢ CPU: OK (${cpu_percent}) - Workers suficientes"
        fi
        
        # Status RAM
        if (( $(echo "$mem_percent_clean > 80" | bc -l) )); then
            echo "  üî¥ RAM: CR√çTICO (${mem_percent}) - Precisa de mais mem√≥ria!"
        elif (( $(echo "$mem_percent_clean > 60" | bc -l) )); then
            echo "  üü° RAM: ALTO (${mem_percent}) - Monitore de perto"
        else
            echo "  üü¢ RAM: OK (${mem_percent}) - Mem√≥ria adequada"
        fi
        
        # Recomenda√ß√£o de workers
        if (( $(echo "$cpu_clean > 80" | bc -l) )); then
            echo "  üë• WORKERS: Aumentar para 2-3 workers"
        elif (( $(echo "$cpu_clean > 60" | bc -l) )); then
            echo "  üë• WORKERS: Considerar 2 workers"
        else
            echo "  üë• WORKERS: 1 worker suficiente"
        fi
        
        # Mem√≥ria por worker
        echo "  üíæ RAM/Worker: ${mem_usage} (com margem: $(echo "scale=0; $mem_clean * 1.5" | bc)MiB)"
    else
        echo "  ‚ùå N√£o foi poss√≠vel obter dados do worker"
    fi
}

# Fun√ß√£o para mostrar hist√≥rico de picos
show_peaks() {
    echo "üìà HIST√ìRICO DE PICOS:"
    echo "  üî• CPU m√°ximo hoje: $(docker stats --no-stream --format "{{.CPUPerc}}" kodus-service-ast-worker 2>/dev/null || echo "N/A")"
    echo "  üíæ RAM m√°xima hoje: $(docker stats --no-stream --format "{{.MemUsage}}" kodus-service-ast-worker 2>/dev/null || echo "N/A")"
}

# Loop principal
while true; do
    clear
    echo "üê≥ MONITOR DOCKER - Recursos dos Workers"
    echo "========================================"
    echo ""
    
    show_timestamp
    echo ""
    
    show_docker_stats
    echo ""
    
    show_recommendations
    echo ""
    
    show_peaks
    echo ""
    
    echo "‚è≥ Pr√≥xima atualiza√ß√£o em 5s... (Ctrl+C para parar)"
    
    sleep 5
done
