#!/bin/bash

# üê≥ SCRIPT: Monitor de recursos Docker vs Interno
# Compara recursos do HOST vs processo Node.js

echo "üê≥ MONITOR DOCKER - Recursos Reais vs Internos"
echo "==============================================="

# Configura√ß√µes
API_URL="http://localhost:3002"
DURATION=${1:-60}
INTERVAL=${2:-5}

echo "üéØ Configura√ß√µes:"
echo "  ‚è±Ô∏è  Dura√ß√£o: ${DURATION}s"
echo "  üìä Intervalo: ${INTERVAL}s"
echo "  üåê API: ${API_URL}"
echo ""

# Fun√ß√£o para obter m√©tricas Docker (HOST)
get_docker_stats() {
    docker stats --no-stream --format "{{.CPUPerc}},{{.MemUsage}},{{.MemPerc}}" kodus-service-ast kodus-service-ast-worker 2>/dev/null | while IFS=',' read -r cpu mem_usage mem_perc; do
        echo "DOCKER,$cpu,$mem_usage,$mem_perc"
    done
}

# Fun√ß√£o para obter m√©tricas internas (Node.js)
get_internal_stats() {
    local response=$(curl -s "${API_URL}/api/health/resources" 2>/dev/null)

    if [ $? -eq 0 ]; then
        echo "$response" | jq -r '
            "INTERNAL," +
            .resources.cpu.percentPerCore + "," +
            .resources.memory.rss + "," +
            .resources.memory.usagePercent
        '
    else
        echo "INTERNAL,ERROR,ERROR,ERROR"
    fi
}

# Fun√ß√£o para formatar sa√≠da
format_output() {
    local timestamp=$(date +%H:%M:%S)
    local docker_line="$1"
    local internal_line="$2"

    if [[ "$docker_line" == "DOCKER,"* ]]; then
        IFS=',' read -r type cpu mem_usage mem_perc <<< "$docker_line"
        echo "[$timestamp] üê≥ DOCKER: CPU: $cpu | RAM: $mem_usage ($mem_perc)"
    fi

    if [[ "$internal_line" == "INTERNAL,"* ]]; then
        IFS=',' read -r type cpu mem_usage mem_perc <<< "$internal_line"
        echo "[$timestamp] üñ•Ô∏è  INTERNO: CPU: ${cpu}% | RAM: ${mem_usage} (${mem_perc}%)"
    fi
}

# Monitoramento principal
echo "üöÄ Iniciando monitoramento Docker vs Interno..."
echo "üí° Dica: Execute opera√ß√µes pesadas durante o monitoramento!"
echo ""

start_time=$(date +%s)
end_time=$((start_time + DURATION))

while [ $(date +%s) -lt $end_time ]; do
    # Obter m√©tricas Docker
    docker_stats=$(get_docker_stats)

    # Obter m√©tricas internas
    internal_stats=$(get_internal_stats)

    # Mostrar compara√ß√£o
    echo "---"
    format_output "$docker_stats" "$internal_stats"
    echo ""

    sleep $INTERVAL
done

# Resumo final
echo "üìä RESUMO FINAL:"
echo "==============="

echo ""
echo "üê≥ DOCKER (HOST):"
docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}" kodus-service-ast kodus-service-ast-worker

echo ""
echo "üñ•Ô∏è  INTERNO (Node.js):"
curl -s "${API_URL}/api/health/resources" | jq -r '
    "API: CPU " + .resources.cpu.percentPerCore + "% | RAM " + .resources.memory.rss + " (" + .resources.memory.usagePercent + "%)"
'

echo ""
echo "üéØ AN√ÅLISE:"
echo "  üê≥ Docker Stats = Recursos do HOST (incluindo overhead)"
echo "  üñ•Ô∏è  Endpoint Interno = Recursos do processo Node.js"
echo "  üìà Diferen√ßa = Overhead do container + outros processos"
echo ""
echo "üí° RECOMENDA√á√ïES:"
echo "  üîç Use Docker Stats para dimensionamento de containers"
echo "  üìä Use Endpoint Interno para otimiza√ß√£o de c√≥digo"
echo "  ‚öñÔ∏è  Considere 1.5x de margem de seguran√ßa"
