#!/bin/bash

# Script para configurar pol√≠ticas RabbitMQ para kodus-service-ast
# Aplica DLX, delivery-limit, SAC e outros argumentos via pol√≠ticas em vez de argumentos de fila

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o de log
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Verificar se estamos em ambiente Docker
check_docker_environment() {
    if command -v docker &> /dev/null && docker ps | grep -q rabbitmq; then
        return 0
    else
        return 1
    fi
}

# Detectar comando rabbitmqctl
setup_rabbitmqctl() {
    if check_docker_environment; then
        # Tentar diferentes nomes de container
        if docker ps | grep -q "rabbitmq-local"; then
            RABBITMQCTL="docker exec rabbitmq-local rabbitmqctl"
        elif docker ps | grep -q "rabbitmq$"; then
            RABBITMQCTL="docker exec rabbitmq rabbitmqctl"
        else
            RABBITMQCTL="docker exec $(docker ps | grep rabbitmq | awk '{print $NF}') rabbitmqctl"
        fi
    else
        RABBITMQCTL="rabbitmqctl"
    fi
}

# Verificar se plugin delayed-message-exchange est√° habilitado
check_delayed_plugin() {
    log "Verificando plugin rabbitmq_delayed_message_exchange..."

    if $RABBITMQCTL list_plugins | grep -q "rabbitmq_delayed_message_exchange"; then
        success "Plugin delayed-message-exchange est√° habilitado"
        return 0
    else
        warning "Plugin delayed-message-exchange N√ÉO est√° habilitado"
        warning "Para usar delayed messages, habilite o plugin:"
        echo "  docker exec rabbitmq-local rabbitmq-plugins enable rabbitmq_delayed_message_exchange"
        return 1
    fi
}

# Aplicar pol√≠ticas de fila
apply_queue_policies() {
    log "Aplicando pol√≠ticas de fila..."

    # Pol√≠tica para filas de processamento AST
    # Aplica delivery-limit, DLX e queue-type
    $RABBITMQCTL set_policy ast-queue-policy \
        "^ast\.initialize\.(repo|impact)\.q$" \
        '{"delivery-limit": 5, "dead-letter-exchange": "ast.jobs.dlx", "queue-type": "quorum"}' \
        --apply-to queues

    success "Pol√≠tica ast-queue-policy aplicada"

    # Pol√≠tica para DLQ
    $RABBITMQCTL set_policy ast-dlq-policy \
        "^ast\.jobs\.dlq$" \
        '{"queue-type": "quorum"}' \
        --apply-to queues

    success "Pol√≠tica ast-dlq-policy aplicada"

    # Pol√≠tica opcional para SAC (single active consumer)
    # S√≥ ative se precisar de processamento ordenado
    if [ "${RABBIT_SAC:-false}" = "true" ]; then
        warning "Aplicando SAC (single active consumer) - pode impactar performance"
        $RABBITMQCTL set_policy ast-sac-policy \
            "^ast\.initialize\.(repo|impact)\.q$" \
            '{"single-active-consumer": true}' \
            --apply-to queues
        success "Pol√≠tica ast-sac-policy aplicada (SAC habilitado)"
    else
        # Remover pol√≠tica SAC se existir
        $RABBITMQCTL clear_policy ast-sac-policy 2>/dev/null || true
        success "Pol√≠tica SAC removida (processamento concorrente habilitado)"
    fi
}

# Aplicar pol√≠ticas de exchange
apply_exchange_policies() {
    log "Aplicando pol√≠ticas de exchange..."

    # Pol√≠tica para delayed exchange (se plugin estiver habilitado)
    if check_delayed_plugin; then
        $RABBITMQCTL set_policy ast-delayed-policy \
            "^ast\.jobs\.delayed\.x$" \
            '{"delayed-message": {"type": "topic"}}' \
            --apply-to exchanges
        success "Pol√≠tica delayed-exchange aplicada"
    fi
}

# Listar pol√≠ticas aplicadas
list_policies() {
    log "Listando pol√≠ticas aplicadas..."
    echo ""
    echo "üìã Pol√≠ticas de fila:"
    $RABBITMQCTL list_policies --formatter pretty_table
    echo ""
    echo "üìã Pol√≠ticas de exchange:"
    $RABBITMQCTL list_policies --apply-to exchanges --formatter pretty_table
}

# Verificar configura√ß√£o
verify_configuration() {
    log "Verificando configura√ß√£o..."

    # Verificar exchanges
    echo "üîÑ Exchanges:"
    $RABBITMQCTL list_exchanges name type | grep "^ast\."

    echo ""
    echo "üìã Filas:"
    $RABBITMQCTL list_queues name policy | grep "^ast\."

    echo ""
    echo "üìã Pol√≠ticas:"
    $RABBITMQCTL list_policies
}

# Fun√ß√£o principal
main() {
    log "üê∞ Configurando pol√≠ticas RabbitMQ para $PROJECT_NAME"

    # Verificar se rabbitmqctl est√° dispon√≠vel
    if ! command -v $RABBITMQCTL &> /dev/null && ! check_docker_environment; then
        error "rabbitmqctl n√£o encontrado. Execute em ambiente com RabbitMQ ou Docker."
        exit 1
    fi

    setup_rabbitmqctl

    # Aplicar configura√ß√µes
    apply_queue_policies
    apply_exchange_policies

    echo ""
    list_policies

    echo ""
    success "üéâ Configura√ß√£o RabbitMQ conclu√≠da!"

    echo ""
    echo "üí° Recomenda√ß√µes para produ√ß√£o:"
    echo "  ‚Ä¢ Aplique essas pol√≠ticas via infraestrutura (Terraform/Ansible)"
    echo "  ‚Ä¢ Monitore uso de DLQ para ajustar delivery-limit"
    echo "  ‚Ä¢ Use SAC apenas quando necess√°rio (impacta concorr√™ncia)"
    echo "  ‚Ä¢ Configure backup/HA para pol√≠ticas cr√≠ticas"
}

# Verificar argumentos
case "${1:-}" in
    "--verify"|"-v")
        setup_rabbitmqctl
        verify_configuration
        ;;
    "--help"|"-h")
        echo "Uso: $0 [op√ß√µes]"
        echo ""
        echo "Script para configurar pol√≠ticas RabbitMQ para kodus-service-ast"
        echo ""
        echo "Op√ß√µes:"
        echo "  --verify, -v    Apenas verificar configura√ß√£o atual"
        echo "  --help, -h      Mostrar esta ajuda"
        echo ""
        echo "Este script aplica pol√≠ticas para DLX, delivery-limit e SAC via RabbitMQ"
        echo "em vez de argumentos de fila, evitando conflitos PRECONDITION_FAILED."
        ;;
    *)
        main "$@"
        ;;
esac
