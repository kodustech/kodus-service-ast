// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: kodus/ast/analyzer.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { kodusRPCChunkResponse } from "../common/chunk";

export const protobufPackage = "kodus.ast";

export enum kodusRPCPlatformType {
  GITHUB = 0,
  GITLAB = 1,
  JIRA = 2,
  SLACK = 3,
  NOTION = 4,
  MSTEAMS = 5,
  DISCORD = 6,
  AZURE_BOARDS = 7,
  AZURE_REPOS = 8,
  KODUS_WEB = 9,
  BITBUCKET = 10,
  UNRECOGNIZED = -1,
}

export enum kodusRPCAuthMode {
  OAUTH = 0,
  TOKEN = 1,
  UNRECOGNIZED = -1,
}

export interface kodusRPCBuildEnrichedGraphRequest {
  baseRepo: kodusRPCCloneRepositoryRequest | undefined;
  headRepo: kodusRPCCloneRepositoryRequest | undefined;
}

export interface kodusRPCAuth {
  type?: kodusRPCAuthMode | undefined;
  token?: string | undefined;
  org?: string | undefined;
}

export interface kodusRPCCloneRepositoryRequest {
  url: string;
  provider: kodusRPCPlatformType;
  branch?: string | undefined;
  auth?: kodusRPCAuth | undefined;
  organizationId: string;
  repositoryId: string;
  repositoryName: string;
}

export interface kodusRPCDeleteRepositoryRequest {
  organizationId: string;
  repositoryId: string;
  repositoryName: string;
  branchName: string;
}

export const KODUS_AST_PACKAGE_NAME = "kodus.ast";

export interface ASTAnalyzerClient {
  buildEnrichedGraph(request: kodusRPCBuildEnrichedGraphRequest): Observable<kodusRPCChunkResponse>;
}

export interface ASTAnalyzerController {
  buildEnrichedGraph(request: kodusRPCBuildEnrichedGraphRequest): Observable<kodusRPCChunkResponse>;
}

export function ASTAnalyzerControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["buildEnrichedGraph"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ASTAnalyzer", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ASTAnalyzer", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AST_ANALYZER_SERVICE_NAME = "ASTAnalyzer";
